
;; Function bool std::operator==(const std::basic_string<_CharT, _Traits, _Alloc>&, const _CharT*) [with _CharT = char, _Traits = std::char_traits<char>, _Alloc = std::allocator<char>] (_ZSteqIcSt11char_traitsIcESaIcEEbRKSbIT_T0_T1_EPKS3_)



Pass 0

  Register 58 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FLOAT_INT_REGS:18000 INT_SSE_REGS:18000 FLOAT_INT_SSE_REGS:18000 ALL_REGS:18000 MEM:8000
  Register 59 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FLOAT_INT_REGS:18000 INT_SSE_REGS:18000 FLOAT_INT_SSE_REGS:18000 ALL_REGS:18000 MEM:7000
  Register 60 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FLOAT_INT_REGS:18000 INT_SSE_REGS:18000 FLOAT_INT_SSE_REGS:18000 ALL_REGS:18000 MEM:7000
  Register 61 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FLOAT_INT_REGS:18000 INT_SSE_REGS:18000 FLOAT_INT_SSE_REGS:18000 ALL_REGS:18000 MEM:8000
  Register 62 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FLOAT_INT_REGS:18000 INT_SSE_REGS:18000 FLOAT_INT_SSE_REGS:18000 ALL_REGS:18000 MEM:8000
  Register 63 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:2000 DIREG:2000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:2000 INDEX_REGS:2000 LEGACY_REGS:2000 GENERAL_REGS:2000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:6000

  Register 53 pref FLOAT_INT_SSE_REGS or none
  Register 54 pref FLOAT_INT_SSE_REGS or none
  Register 55 pref FLOAT_INT_SSE_REGS or none
  Register 56 pref FLOAT_INT_SSE_REGS or none
  Register 57 pref FLOAT_INT_SSE_REGS or none
  Register 58 pref AREG, else GENERAL_REGS
  Register 59 pref GENERAL_REGS or none
  Register 60 pref AREG, else GENERAL_REGS
  Register 61 pref GENERAL_REGS or none
  Register 62 pref GENERAL_REGS or none
  Register 63 pref Q_REGS, else GENERAL_REGS
  Register 64 pref FLOAT_INT_SSE_REGS or none
65 registers.

Register 58 used 2 times across 2 insns in block 0; set 1 time; pref AREG, else GENERAL_REGS.

Register 59 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 60 used 2 times across 2 insns in block 0; set 1 time; pref AREG, else GENERAL_REGS.

Register 61 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 62 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 63 used 2 times across 2 insns in block 0; set 1 time; 1 bytes; pref Q_REGS, else GENERAL_REGS.

1 basic blocks, 2 edges.

Basic block 0 prev -1, next -2, loop_depth 0, count 0, freq 0.
Predecessors:  ENTRY (fallthru)
Successors:  EXIT [100.0%]  (fallthru)
Registers live at start: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Register 58 in 0.
;; Register 59 in 0.
;; Register 60 in 0.
;; Register 61 in 0.
;; Register 62 in 0.
;; Register 63 in 0.
(note 2 0 3 NOTE_INSN_DELETED)

(note 3 2 6 0 NOTE_INSN_FUNCTION_BEG)

;; Start of basic block 0, registers live: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 6 3 8 0 [bb 0] NOTE_INSN_BASIC_BLOCK)

(insn 8 6 9 0 (set (reg:SI 61 [ __rhs ])
        (mem/c/i:SI (plus:SI (reg/f:SI 16 argp)
                (const_int 4 [0x4])) [0 __rhs+0 S4 A32])) 34 {*movsi_1} (nil)
    (nil))

(insn 9 8 10 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 61 [ __rhs ])) 34 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 61 [ __rhs ])
        (nil)))

(insn 10 9 11 0 (set (reg:SI 62 [ __lhs ])
        (mem/c/i:SI (reg/f:SI 16 argp) [0 __lhs+0 S4 A32])) 34 {*movsi_1} (nil)
    (nil))

(insn 11 10 12 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 62 [ __lhs ])) 34 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 62 [ __lhs ])
        (nil)))

(call_insn 12 11 13 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("_ZNKSs7compareEPKc") [flags 0x41] <function_decl 0xb71c8600 compare>) [0 S1 A8])
            (const_int 8 [0x8]))) 559 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 13 12 14 0 (set (reg:SI 58 [ D.16872 ])
        (reg:SI 0 ax)) 34 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 14 13 15 0 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 58 [ D.16872 ])
            (const_int 0 [0x0]))) 0 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 58 [ D.16872 ])
        (nil)))

(insn 15 14 16 0 (set (reg:QI 63)
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0x0]))) 361 {*setcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (expr_list:REG_EQUAL (eq:QI (reg:SI 58 [ D.16872 ])
                (const_int 0 [0x0]))
            (nil))))

(insn 16 15 17 0 (parallel [
            (set (reg:SI 59 [ D.16871 ])
                (zero_extend:SI (reg:QI 63)))
            (clobber (reg:CC 17 flags))
        ]) 77 {*zero_extendqisi2_movzbw_and} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:QI 63)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 17 16 20 0 (set (reg:SI 60 [ <result> ])
        (reg:SI 59 [ D.16871 ])) 34 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 59 [ D.16871 ])
        (nil)))

(note 20 17 23 0 NOTE_INSN_FUNCTION_END)

(insn 23 20 29 0 (set (reg/i:SI 0 ax [ <result> ])
        (reg:SI 60 [ <result> ])) 34 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 60 [ <result> ])
        (nil)))

(insn 29 23 0 0 (use (reg/i:SI 0 ax [ <result> ])) -1 (nil)
    (nil))
;; End of basic block 0, registers live:
 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function int main() (main)



Pass 0

  Register 59 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FLOAT_INT_REGS:18000 INT_SSE_REGS:18000 FLOAT_INT_SSE_REGS:18000 ALL_REGS:18000 MEM:7000
  Register 61 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FLOAT_INT_REGS:18000 INT_SSE_REGS:18000 FLOAT_INT_SSE_REGS:18000 ALL_REGS:18000 MEM:7000
  Register 62 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FLOAT_INT_REGS:18000 INT_SSE_REGS:18000 FLOAT_INT_SSE_REGS:18000 ALL_REGS:18000 MEM:7000
  Register 63 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:2000 DIREG:2000 AD_REGS:0 Q_REGS:0 NON_Q_REGS:2000 INDEX_REGS:2000 LEGACY_REGS:2000 GENERAL_REGS:2000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 64 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:8000
  Register 65 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FLOAT_INT_REGS:18000 INT_SSE_REGS:18000 FLOAT_INT_SSE_REGS:18000 ALL_REGS:18000 MEM:8000
  Register 66 costs: AD_REGS:-1000 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 MEM:12000
  Register 68 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FLOAT_INT_REGS:18000 INT_SSE_REGS:18000 FLOAT_INT_SSE_REGS:18000 ALL_REGS:18000 MEM:8000
  Register 70 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FLOAT_INT_REGS:18000 INT_SSE_REGS:18000 FLOAT_INT_SSE_REGS:18000 ALL_REGS:18000 MEM:8000
  Register 71 costs: AREG:-1000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FLOAT_INT_REGS:18000 INT_SSE_REGS:18000 FLOAT_INT_SSE_REGS:18000 ALL_REGS:18000 MEM:7000
  Register 73 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FLOAT_INT_REGS:18000 INT_SSE_REGS:18000 FLOAT_INT_SSE_REGS:18000 ALL_REGS:18000 MEM:8000
  Register 74 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FLOAT_INT_REGS:18000 INT_SSE_REGS:18000 FLOAT_INT_SSE_REGS:18000 ALL_REGS:18000 MEM:8000
  Register 75 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FLOAT_INT_REGS:18000 INT_SSE_REGS:18000 FLOAT_INT_SSE_REGS:18000 ALL_REGS:18000 MEM:8000
  Register 76 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FLOAT_INT_REGS:18000 INT_SSE_REGS:18000 FLOAT_INT_SSE_REGS:18000 ALL_REGS:18000 MEM:8000
  Register 77 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FLOAT_INT_REGS:18000 INT_SSE_REGS:18000 FLOAT_INT_SSE_REGS:18000 ALL_REGS:18000 MEM:8000
  Register 78 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FLOAT_INT_REGS:18000 INT_SSE_REGS:18000 FLOAT_INT_SSE_REGS:18000 ALL_REGS:18000 MEM:8000
  Register 79 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FLOAT_INT_REGS:18000 INT_SSE_REGS:18000 FLOAT_INT_SSE_REGS:18000 ALL_REGS:18000 MEM:8000
  Register 80 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FLOAT_INT_REGS:18000 INT_SSE_REGS:18000 FLOAT_INT_SSE_REGS:18000 ALL_REGS:18000 MEM:8000
  Register 81 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FLOAT_INT_REGS:18000 INT_SSE_REGS:18000 FLOAT_INT_SSE_REGS:18000 ALL_REGS:18000 MEM:8000
  Register 82 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FLOAT_INT_REGS:18000 INT_SSE_REGS:18000 FLOAT_INT_SSE_REGS:18000 ALL_REGS:18000 MEM:8000
  Register 83 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FLOAT_INT_REGS:18000 INT_SSE_REGS:18000 FLOAT_INT_SSE_REGS:18000 ALL_REGS:18000 MEM:8000
  Register 84 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FLOAT_INT_REGS:18000 INT_SSE_REGS:18000 FLOAT_INT_SSE_REGS:18000 ALL_REGS:18000 MEM:8000
  Register 85 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FLOAT_INT_REGS:18000 INT_SSE_REGS:18000 FLOAT_INT_SSE_REGS:18000 ALL_REGS:18000 MEM:8000
  Register 87 costs: AREG:-2000 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FLOAT_INT_REGS:72000 INT_SSE_REGS:72000 FLOAT_INT_SSE_REGS:72000 ALL_REGS:72000 MEM:30000
  Register 88 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FLOAT_INT_REGS:18000 INT_SSE_REGS:18000 FLOAT_INT_SSE_REGS:18000 ALL_REGS:18000 MEM:8000
  Register 89 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FLOAT_INT_REGS:18000 INT_SSE_REGS:18000 FLOAT_INT_SSE_REGS:18000 ALL_REGS:18000 MEM:8000
  Register 90 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FLOAT_INT_REGS:18000 INT_SSE_REGS:18000 FLOAT_INT_SSE_REGS:18000 ALL_REGS:18000 MEM:8000
  Register 91 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FLOAT_INT_REGS:18000 INT_SSE_REGS:18000 FLOAT_INT_SSE_REGS:18000 ALL_REGS:18000 MEM:8000
  Register 93 costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 LEGACY_REGS:0 GENERAL_REGS:0 FLOAT_INT_REGS:18000 INT_SSE_REGS:18000 FLOAT_INT_SSE_REGS:18000 ALL_REGS:18000 MEM:8000

  Register 53 pref FLOAT_INT_SSE_REGS or none
  Register 54 pref FLOAT_INT_SSE_REGS or none
  Register 55 pref FLOAT_INT_SSE_REGS or none
  Register 56 pref FLOAT_INT_SSE_REGS or none
  Register 57 pref FLOAT_INT_SSE_REGS or none
  Register 58 pref FLOAT_INT_SSE_REGS or none
  Register 59 pref GENERAL_REGS or none
  Register 60 pref FLOAT_INT_SSE_REGS or none
  Register 61 pref GENERAL_REGS or none
  Register 62 pref GENERAL_REGS or none
  Register 63 pref Q_REGS, else GENERAL_REGS
  Register 64 pref AREG, else GENERAL_REGS
  Register 65 pref AREG, else GENERAL_REGS
  Register 66 pref AD_REGS, else GENERAL_REGS
  Register 67 pref FLOAT_INT_SSE_REGS or none
  Register 68 pref AREG, else GENERAL_REGS
  Register 69 pref FLOAT_INT_SSE_REGS or none
  Register 70 pref AREG, else GENERAL_REGS
  Register 71 pref AREG, else GENERAL_REGS
  Register 72 pref FLOAT_INT_SSE_REGS or none
  Register 73 pref GENERAL_REGS or none
  Register 74 pref GENERAL_REGS or none
  Register 75 pref GENERAL_REGS or none
  Register 76 pref GENERAL_REGS or none
  Register 77 pref GENERAL_REGS or none
  Register 78 pref GENERAL_REGS or none
  Register 79 pref GENERAL_REGS or none
  Register 80 pref GENERAL_REGS or none
  Register 81 pref GENERAL_REGS or none
  Register 82 pref GENERAL_REGS or none
  Register 83 pref GENERAL_REGS or none
  Register 84 pref GENERAL_REGS or none
  Register 85 pref GENERAL_REGS or none
  Register 86 pref FLOAT_INT_SSE_REGS or none
  Register 87 pref AREG, else GENERAL_REGS
  Register 88 pref GENERAL_REGS or none
  Register 89 pref GENERAL_REGS or none
  Register 90 pref GENERAL_REGS or none
  Register 91 pref GENERAL_REGS or none
  Register 92 pref FLOAT_INT_SSE_REGS or none
  Register 93 pref GENERAL_REGS or none
94 registers.

Register 59 used 2 times across 5 insns in block 15; set 1 time; crosses 1 call; GENERAL_REGS or none.

Register 61 used 2 times across 5 insns in block 8; set 1 time; crosses 1 call; GENERAL_REGS or none.

Register 62 used 2 times across 2 insns in block 14; set 1 time; GENERAL_REGS or none.

Register 63 used 2 times across 2 insns in block 11; set 1 time; 1 bytes; pref Q_REGS, else GENERAL_REGS.

Register 64 used 2 times across 2 insns in block 11; set 1 time; 1 bytes; pref AREG, else GENERAL_REGS.

Register 65 used 2 times across 4 insns in block 5; set 1 time; pref AREG, else GENERAL_REGS.

Register 66 used 2 times across 2 insns in block 4; set 1 time; 8 bytes; pref AD_REGS, else GENERAL_REGS.

Register 68 used 2 times across 2 insns in block 0; set 1 time; pref AREG, else GENERAL_REGS.

Register 70 used 2 times across 2 insns in block 0; set 1 time; pref AREG, else GENERAL_REGS.

Register 71 used 2 times across 3 insns; set 1 time; pref AREG, else GENERAL_REGS.

Register 73 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

Register 74 used 2 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none.

Register 75 used 2 times across 2 insns in block 4; set 1 time; GENERAL_REGS or none.

Register 76 used 2 times across 2 insns in block 4; set 1 time; GENERAL_REGS or none.

Register 77 used 2 times across 2 insns in block 4; set 1 time; GENERAL_REGS or none.

Register 78 used 2 times across 2 insns in block 4; set 1 time; GENERAL_REGS or none.

Register 79 used 2 times across 2 insns in block 4; set 1 time; GENERAL_REGS or none.

Register 80 used 2 times across 2 insns in block 4; set 1 time; GENERAL_REGS or none; pointer.

Register 81 used 2 times across 2 insns in block 4; set 1 time; GENERAL_REGS or none.

Register 82 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none; pointer.

Register 83 used 2 times across 2 insns in block 5; set 1 time; GENERAL_REGS or none; pointer.

Register 84 used 2 times across 2 insns in block 6; set 1 time; GENERAL_REGS or none; pointer.

Register 85 used 2 times across 2 insns in block 6; set 1 time; GENERAL_REGS or none.

Register 87 used 8 times across 8 insns; set 4 times; dies in 4 places; pref AREG, else GENERAL_REGS.

Register 88 used 2 times across 2 insns in block 8; set 1 time; GENERAL_REGS or none; pointer.

Register 89 used 2 times across 2 insns in block 10; set 1 time; GENERAL_REGS or none; pointer.

Register 90 used 2 times across 2 insns in block 13; set 1 time; GENERAL_REGS or none.

Register 91 used 2 times across 2 insns in block 14; set 1 time; GENERAL_REGS or none; pointer.

Register 93 used 2 times across 2 insns in block 15; set 1 time; GENERAL_REGS or none; pointer.

15 basic blocks, 21 edges.

Basic block 0 prev -1, next 1, loop_depth 0, count 0, freq 0.
Predecessors:  ENTRY (fallthru)
Successors:  4 1 (fallthru)
Registers live at start: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 1 prev 0, next 4, loop_depth 0, count 0, freq 0.
Predecessors:  0 (fallthru)
Successors:  4 [100.0%]  (fallthru)
Registers live at start: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 4 prev 1, next 5, loop_depth 0, count 0, freq 0.
Predecessors:  1 [100.0%]  (fallthru) 0
Successors:  5 (fallthru) 8 (ab,abcall,eh)
Registers live at start: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 5 prev 4, next 6, loop_depth 0, count 0, freq 0.
Predecessors:  4 (fallthru)
Successors:  6 (fallthru) 8 (ab,abcall,eh)
Registers live at start: 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 6 prev 5, next 7, loop_depth 0, count 0, freq 0.
Predecessors:  5 (fallthru)
Successors:  7 (fallthru) 15 (ab,abcall,eh)
Registers live at start: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 7 prev 6, next 8, loop_depth 0, count 0, freq 0.
Predecessors:  6 (fallthru)
Successors:  9
Registers live at start: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 8 prev 7, next 9, loop_depth 0, count 0, freq 0.
Predecessors:  4 (ab,abcall,eh) 5 (ab,abcall,eh)
Successors: 
Registers live at start: 0 [ax] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 7 [sp] 16 [argp] 20 [frame]

Basic block 9 prev 8, next 10, loop_depth 0, count 0, freq 0.
Predecessors:  7
Successors:  12 10 (fallthru)
Registers live at start: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 10 prev 9, next 11, loop_depth 0, count 0, freq 0.
Predecessors:  9 (fallthru)
Successors:  11 (fallthru) 15 (ab,abcall,eh)
Registers live at start: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 11 prev 10, next 12, loop_depth 0, count 0, freq 0.
Predecessors:  10 (fallthru)
Successors:  12 (fallthru) 13
Registers live at start: 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 12 prev 11, next 13, loop_depth 0, count 0, freq 0.
Predecessors:  9 11 (fallthru)
Successors: 
Registers live at start: 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 7 [sp] 16 [argp] 20 [frame]

Basic block 13 prev 12, next 14, loop_depth 0, count 0, freq 0.
Predecessors:  11
Successors:  14 (fallthru) 15 (ab,abcall,eh)
Registers live at start: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 6 [bp] 7 [sp] 16 [argp] 20 [frame]

Basic block 14 prev 13, next 15, loop_depth 0, count 0, freq 0.
Predecessors:  13 (fallthru)
Successors:  16
Registers live at start: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71

Basic block 15 prev 14, next 16, loop_depth 0, count 0, freq 0.
Predecessors:  6 (ab,abcall,eh) 10 (ab,abcall,eh) 13 (ab,abcall,eh)
Successors: 
Registers live at start: 0 [ax] 7 [sp] 16 [argp] 20 [frame]
Registers live at end: 7 [sp] 16 [argp] 20 [frame]

Basic block 16 prev 15, next -2, loop_depth 0, count 0, freq 0.
Predecessors:  14
Successors:  EXIT [100.0%]  (fallthru)
Registers live at start: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71
Registers live at end: 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Register 59 in 3.
;; Register 61 in 3.
;; Register 62 in 0.
;; Register 63 in 0.
;; Register 64 in 0.
;; Register 65 in 0.
;; Register 66 in 0.
;; Register 68 in 0.
;; Register 70 in 0.
;; Register 73 in 0.
;; Register 74 in 0.
;; Register 75 in 0.
;; Register 76 in 0.
;; Register 77 in 0.
;; Register 78 in 0.
;; Register 79 in 0.
;; Register 80 in 0.
;; Register 81 in 0.
;; Register 82 in 1.
;; Register 83 in 0.
;; Register 84 in 0.
;; Register 85 in 0.
;; Register 88 in 0.
;; Register 89 in 0.
;; Register 90 in 0.
;; Register 91 in 0.
;; Register 93 in 0.
(note 2 0 6 NOTE_INSN_DELETED)

;; Start of basic block 0, registers live: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 6 2 4 0 [bb 0] NOTE_INSN_BASIC_BLOCK)

(note 4 6 9 0 NOTE_INSN_FUNCTION_BEG)

(call_insn 9 4 10 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("luaL_newstate") [flags 0x41] <function_decl 0xb722db80 luaL_newstate>) [0 S1 A8])
            (const_int 0 [0x0]))) 559 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 10 9 11 0 (set (reg:SI 70 [ D.16747 ])
        (reg:SI 0 ax)) 34 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 11 10 13 0 (set (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -16 [0xfffffff0])) [0 l+0 S4 A32])
        (reg:SI 70 [ D.16747 ])) 34 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 70 [ D.16747 ])
        (nil)))

(insn 13 11 14 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 0 [0x0])) 34 {*movsi_1} (nil)
    (nil))

(insn 14 13 15 0 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (symbol_ref/f:SI ("*.LC0") [flags 0x2] <string_cst 0xb70636e0>)) 34 {*movsi_1} (nil)
    (nil))

(insn 15 14 16 0 (set (reg:SI 73 [ l ])
        (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -16 [0xfffffff0])) [0 l+0 S4 A32])) 34 {*movsi_1} (nil)
    (nil))

(insn 16 15 17 0 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 73 [ l ])) 34 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 73 [ l ])
        (nil)))

(call_insn 17 16 18 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("luaL_loadfilex") [flags 0x41] <function_decl 0xb722da00 luaL_loadfilex>) [0 S1 A8])
            (const_int 12 [0xc]))) 559 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 18 17 19 0 (set (reg:SI 68 [ D.16752 ])
        (reg:SI 0 ax)) 34 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 19 18 20 0 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 68 [ D.16752 ])
            (const_int 0 [0x0]))) 0 {*cmpsi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:SI 68 [ D.16752 ])
        (nil)))

(jump_insn 20 19 22 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref:SI 42)
            (pc))) 367 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 0, registers live:
 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 1, registers live: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 22 20 23 1 [bb 1] NOTE_INSN_BASIC_BLOCK)

(insn 23 22 24 1 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [0 S4 A32])
        (const_int 0 [0x0])) 34 {*movsi_1} (nil)
    (nil))

(insn 24 23 25 1 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [0 S4 A32])
        (const_int 0 [0x0])) 34 {*movsi_1} (nil)
    (nil))

(insn 25 24 26 1 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (const_int 0 [0x0])) 34 {*movsi_1} (nil)
    (nil))

(insn 26 25 27 1 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int -1 [0xffffffff])) 34 {*movsi_1} (nil)
    (nil))

(insn 27 26 28 1 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 0 [0x0])) 34 {*movsi_1} (nil)
    (nil))

(insn 28 27 29 1 (set (reg:SI 74 [ l ])
        (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -16 [0xfffffff0])) [0 l+0 S4 A32])) 34 {*movsi_1} (nil)
    (nil))

(insn 29 28 30 1 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 74 [ l ])) 34 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 74 [ l ])
        (nil)))

(call_insn 30 29 42 1 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("lua_pcallk") [flags 0x41] <function_decl 0xb7224a00 lua_pcallk>) [0 S1 A8])
            (const_int 24 [0x18]))) 559 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (nil))
;; End of basic block 1, registers live:
 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 4, registers live: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 42 30 43 4 7 "" [1 uses])

(note 43 42 45 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 45 43 46 4 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (symbol_ref/f:SI ("*.LC1") [flags 0x2] <string_cst 0xb705c208>)) 34 {*movsi_1} (nil)
    (nil))

(insn 46 45 47 4 (set (reg:SI 75 [ l ])
        (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -16 [0xfffffff0])) [0 l+0 S4 A32])) 34 {*movsi_1} (nil)
    (nil))

(insn 47 46 48 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 75 [ l ])) 34 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 75 [ l ])
        (nil)))

(call_insn 48 47 50 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("lua_getglobal") [flags 0x41] <function_decl 0xb721ff80 lua_getglobal>) [0 S1 A8])
            (const_int 8 [0x8]))) 559 {*call_value_0} (nil)
    (expr_list:REG_UNUSED (reg:SI 0 ax)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (nil))

(insn 50 48 51 4 (set (mem:DI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S8 A32])
        (const_int 1 [0x1])) 56 {*movdi_2} (nil)
    (nil))

(insn 51 50 52 4 (set (reg:SI 76 [ l ])
        (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -16 [0xfffffff0])) [0 l+0 S4 A32])) 34 {*movsi_1} (nil)
    (nil))

(insn 52 51 53 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 76 [ l ])) 34 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 76 [ l ])
        (nil)))

(call_insn 53 52 55 4 (call (mem:QI (symbol_ref:SI ("lua_pushinteger") [flags 0x41] <function_decl 0xb721fb00 lua_pushinteger>) [0 S1 A8])
        (const_int 12 [0xc])) 387 {*call_0} (nil)
    (nil)
    (nil))

(insn 55 53 56 4 (set (mem:DI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S8 A32])
        (const_int 3 [0x3])) 56 {*movdi_2} (nil)
    (nil))

(insn 56 55 57 4 (set (reg:SI 77 [ l ])
        (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -16 [0xfffffff0])) [0 l+0 S4 A32])) 34 {*movsi_1} (nil)
    (nil))

(insn 57 56 58 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 77 [ l ])) 34 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 77 [ l ])
        (nil)))

(call_insn 58 57 60 4 (call (mem:QI (symbol_ref:SI ("lua_pushinteger") [flags 0x41] <function_decl 0xb721fb00 lua_pushinteger>) [0 S1 A8])
        (const_int 12 [0xc])) 387 {*call_0} (nil)
    (nil)
    (nil))

(insn 60 58 62 4 (set (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -12 [0xfffffff4])) [0 num_args+0 S4 A32])
        (const_int 2 [0x2])) 34 {*movsi_1} (nil)
    (nil))

(insn 62 60 64 4 (set (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -8 [0xfffffff8])) [0 num_return_values+0 S4 A32])
        (const_int 2 [0x2])) 34 {*movsi_1} (nil)
    (nil))

(insn 64 62 65 4 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [0 S4 A32])
        (const_int 0 [0x0])) 34 {*movsi_1} (nil)
    (nil))

(insn 65 64 66 4 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (const_int 0 [0x0])) 34 {*movsi_1} (nil)
    (nil))

(insn 66 65 67 4 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 2 [0x2])) 34 {*movsi_1} (nil)
    (nil))

(insn 67 66 68 4 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 2 [0x2])) 34 {*movsi_1} (nil)
    (nil))

(insn 68 67 69 4 (set (reg:SI 78 [ l ])
        (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -16 [0xfffffff0])) [0 l+0 S4 A32])) 34 {*movsi_1} (nil)
    (nil))

(insn 69 68 70 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 78 [ l ])) 34 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 78 [ l ])
        (nil)))

(call_insn 70 69 72 4 (call (mem:QI (symbol_ref:SI ("lua_callk") [flags 0x41] <function_decl 0xb7224980 lua_callk>) [0 S1 A8])
        (const_int 20 [0x14])) 387 {*call_0} (nil)
    (nil)
    (nil))

(insn 72 70 73 4 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 0 [0x0])) 34 {*movsi_1} (nil)
    (nil))

(insn 73 72 74 4 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 1 [0x1])) 34 {*movsi_1} (nil)
    (nil))

(insn 74 73 75 4 (set (reg:SI 79 [ l ])
        (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -16 [0xfffffff0])) [0 l+0 S4 A32])) 34 {*movsi_1} (nil)
    (nil))

(insn 75 74 76 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 79 [ l ])) 34 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 79 [ l ])
        (nil)))

(call_insn 76 75 77 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:SI ("lua_tointegerx") [flags 0x41] <function_decl 0xb721f480 lua_tointegerx>) [0 S1 A8])
            (const_int 12 [0xc]))) 559 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 77 76 78 4 (set (reg:DI 66 [ D.16754 ])
        (reg:DI 0 ax)) 56 {*movdi_2} (nil)
    (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))

(insn 78 77 80 4 (set (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -4 [0xfffffffc])) [0 diff+0 S4 A32])
        (subreg:SI (reg:DI 66 [ D.16754 ]) 0)) 34 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:DI 66 [ D.16754 ])
        (nil)))

(insn 80 78 81 4 (parallel [
            (set (reg/f:SI 80)
                (plus:SI (reg/f:SI 20 frame)
                    (const_int -17 [0xffffffef])))
            (clobber (reg:CC 17 flags))
        ]) 148 {*addsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))

(insn 81 80 82 4 (set (mem/i:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 80)) 34 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 80)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
                (const_int -17 [0xffffffef]))
            (nil))))

(call_insn 82 81 83 4 (call (mem:QI (symbol_ref:SI ("_ZNSaIcEC1Ev") [flags 0x41] <function_decl 0xb7535780 __comp_ctor >) [0 S1 A8])
        (const_int 4 [0x4])) 387 {*call_0} (nil)
    (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 83 82 84 4 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 0 [0x0])) 34 {*movsi_1} (nil)
    (nil))

(insn 84 83 85 4 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 2 [0x2])) 34 {*movsi_1} (nil)
    (nil))

(insn 85 84 86 4 (set (reg:SI 81 [ l ])
        (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -16 [0xfffffff0])) [0 l+0 S4 A32])) 34 {*movsi_1} (nil)
    (nil))

(insn 86 85 87 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 81 [ l ])) 34 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 81 [ l ])
        (nil)))

(call_insn 87 86 181 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("lua_tolstring") [flags 0x41] <function_decl 0xb721f580 lua_tolstring>) [0 S1 A8])
            (const_int 12 [0xc]))) 559 {*call_value_0} (nil)
    (expr_list:REG_EH_REGION (const_int 1 [0x1])
        (nil))
    (nil))
;; End of basic block 4, registers live:
 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 5, registers live: 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 181 87 88 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 88 181 90 5 (set (reg:SI 65 [ D.16755 ])
        (reg:SI 0 ax)) 34 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(insn 90 88 91 5 (parallel [
            (set (reg/f:SI 82)
                (plus:SI (reg/f:SI 20 frame)
                    (const_int -17 [0xffffffef])))
            (clobber (reg:CC 17 flags))
        ]) 148 {*addsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))

(insn 91 90 92 5 (set (mem/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 82)) 34 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 82)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
                (const_int -17 [0xffffffef]))
            (nil))))

(insn 92 91 93 5 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 65 [ D.16755 ])) 34 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 65 [ D.16755 ])
        (nil)))

(insn 93 92 94 5 (parallel [
            (set (reg/f:SI 83)
                (plus:SI (reg/f:SI 20 frame)
                    (const_int -24 [0xffffffe8])))
            (clobber (reg:CC 17 flags))
        ]) 148 {*addsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))

(insn 94 93 95 5 (set (mem/i:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 83)) 34 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 83)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
                (const_int -24 [0xffffffe8]))
            (nil))))

(call_insn 95 94 96 5 (call (mem:QI (symbol_ref:SI ("_ZNSsC1EPKcRKSaIcE") [flags 0x41] <function_decl 0xb71c8980 __comp_ctor >) [0 S1 A8])
        (const_int 12 [0xc])) 387 {*call_0} (nil)
    (expr_list:REG_EH_REGION (const_int 1 [0x1])
        (nil))
    (nil))
;; End of basic block 5, registers live:
 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 6, registers live: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 96 95 97 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 97 96 98 6 (parallel [
            (set (reg/f:SI 84)
                (plus:SI (reg/f:SI 20 frame)
                    (const_int -17 [0xffffffef])))
            (clobber (reg:CC 17 flags))
        ]) 148 {*addsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))

(insn 98 97 99 6 (set (mem/i:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 84)) 34 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 84)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
                (const_int -17 [0xffffffef]))
            (nil))))

(call_insn 99 98 101 6 (call (mem:QI (symbol_ref:SI ("_ZNSaIcED1Ev") [flags 0x41] <function_decl 0xb7535880 __comp_dtor >) [0 S1 A8])
        (const_int 4 [0x4])) 387 {*call_0} (nil)
    (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 101 99 102 6 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int -3 [0xfffffffd])) 34 {*movsi_1} (nil)
    (nil))

(insn 102 101 103 6 (set (reg:SI 85 [ l ])
        (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -16 [0xfffffff0])) [0 l+0 S4 A32])) 34 {*movsi_1} (nil)
    (nil))

(insn 103 102 104 6 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 85 [ l ])) 34 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 85 [ l ])
        (nil)))

(call_insn 104 103 182 6 (call (mem:QI (symbol_ref:SI ("lua_settop") [flags 0x41] <function_decl 0xb7218d80 lua_settop>) [0 S1 A8])
        (const_int 8 [0x8])) 387 {*call_0} (nil)
    (expr_list:REG_EH_REGION (const_int 3 [0x3])
        (nil))
    (nil))
;; End of basic block 6, registers live:
 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 7, registers live: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 182 104 105 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(jump_insn 105 182 106 7 (set (pc)
        (label_ref 119)) 382 {jump} (nil)
    (nil))
;; End of basic block 7, registers live:
 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 106 105 196)

;; Start of basic block 8, registers live: 0 [ax] 7 [sp] 16 [argp] 20 [frame]
(code_label/s 196 106 199 8 16 "" [1 uses])

(note 199 196 197 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 197 199 107 8 (set (reg:SI 87 [ save_eptr.46 ])
        (reg:SI 0 ax)) 34 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(note/s 107 197 110 8 "" NOTE_INSN_DELETED_LABEL 9)

(insn 110 107 112 8 (set (reg:SI 61 [ save_eptr.46 ])
        (reg:SI 87 [ save_eptr.46 ])) 34 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 87 [ save_eptr.46 ])
        (nil)))

(insn 112 110 113 8 (parallel [
            (set (reg/f:SI 88)
                (plus:SI (reg/f:SI 20 frame)
                    (const_int -17 [0xffffffef])))
            (clobber (reg:CC 17 flags))
        ]) 148 {*addsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))

(insn 113 112 114 8 (set (mem/i:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 88)) 34 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 88)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
                (const_int -17 [0xffffffef]))
            (nil))))

(call_insn 114 113 115 8 (call (mem:QI (symbol_ref:SI ("_ZNSaIcED1Ev") [flags 0x41] <function_decl 0xb7535880 __comp_dtor >) [0 S1 A8])
        (const_int 4 [0x4])) 387 {*call_0} (nil)
    (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(insn 115 114 189 8 (set (reg:SI 87 [ save_eptr.46 ])
        (reg:SI 61 [ save_eptr.46 ])) 34 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 61 [ save_eptr.46 ])
        (nil)))

(insn 189 115 190 8 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 87 [ save_eptr.46 ])) 34 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 87 [ save_eptr.46 ])
        (nil)))

(call_insn 190 189 118 8 (call (mem:QI (symbol_ref:SI ("_Unwind_Resume") [flags 0x41]) [0 S1 A8])
        (const_int 16 [0x10])) 387 {*call_0} (nil)
    (expr_list:REG_NORETURN (const_int 0 [0x0])
        (nil))
    (nil))
;; End of basic block 8, registers live:
 7 [sp] 16 [argp] 20 [frame]

(barrier 118 190 119)

;; Start of basic block 9, registers live: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 119 118 120 9 8 "" [1 uses])

(note 120 119 122 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 122 120 123 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffc])) [0 diff+0 S4 A32])
            (const_int -2 [0xfffffffe]))) 2 {*cmpsi_1_insn} (nil)
    (nil))

(jump_insn 123 122 125 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 135)
            (pc))) 367 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 9, registers live:
 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 10, registers live: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 125 123 126 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 126 125 127 10 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (symbol_ref/f:SI ("*.LC2") [flags 0x2] <string_cst 0xb7069c00>)) 34 {*movsi_1} (nil)
    (nil))

(insn 127 126 128 10 (parallel [
            (set (reg/f:SI 89)
                (plus:SI (reg/f:SI 20 frame)
                    (const_int -24 [0xffffffe8])))
            (clobber (reg:CC 17 flags))
        ]) 148 {*addsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))

(insn 128 127 129 10 (set (mem/i:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 89)) 34 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 89)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
                (const_int -24 [0xffffffe8]))
            (nil))))

(call_insn 129 128 183 10 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref/i:SI ("_ZSteqIcSt11char_traitsIcESaIcEEbRKSbIT_T0_T1_EPKS3_") [flags 0x1] <function_decl 0xb7232500 operator==>) [0 S1 A8])
            (const_int 8 [0x8]))) 559 {*call_value_0} (nil)
    (expr_list:REG_EH_REGION (const_int 3 [0x3])
        (nil))
    (nil))
;; End of basic block 10, registers live:
 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 11, registers live: 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 183 129 130 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 130 183 132 11 (set (reg:QI 64 [ D.16758 ])
        (reg:QI 0 ax)) 43 {*movqi_1} (nil)
    (expr_list:REG_DEAD (reg:QI 0 ax)
        (nil)))

(insn 132 130 133 11 (parallel [
            (set (reg:QI 63 [ D.16759 ])
                (xor:QI (reg:QI 64 [ D.16758 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 241 {*xorqi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_DEAD (reg:QI 64 [ D.16758 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 133 132 134 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 63 [ D.16759 ])
            (const_int 0 [0x0]))) 6 {*cmpqi_ccno_1} (nil)
    (expr_list:REG_DEAD (reg:QI 63 [ D.16759 ])
        (nil)))

(jump_insn 134 133 135 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 143)
            (pc))) 367 {*jcc_1} (nil)
    (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil)))
;; End of basic block 11, registers live:
 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 12, registers live: 7 [sp] 16 [argp] 20 [frame]
(code_label 135 134 136 12 10 "" [1 uses])

(note 136 135 137 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 137 136 138 12 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (symbol_ref:SI ("_ZZ4mainE19__PRETTY_FUNCTION__") [flags 0x2] <var_decl 0xb7234268 __PRETTY_FUNCTION__>)) 34 {*movsi_1} (nil)
    (nil))

(insn 138 137 139 12 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 29 [0x1d])) 34 {*movsi_1} (nil)
    (nil))

(insn 139 138 140 12 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (symbol_ref/f:SI ("*.LC3") [flags 0x2] <string_cst 0xb7069ca0>)) 34 {*movsi_1} (nil)
    (nil))

(insn 140 139 141 12 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (symbol_ref/f:SI ("*.LC4") [flags 0x2] <string_cst 0xb7061440>)) 34 {*movsi_1} (nil)
    (nil))

(call_insn 141 140 142 12 (call (mem:QI (symbol_ref:SI ("__assert_fail") [flags 0x41] <function_decl 0xb7218880 __assert_fail>) [0 S1 A8])
        (const_int 16 [0x10])) 387 {*call_0} (nil)
    (expr_list:REG_NORETURN (const_int 0 [0x0])
        (expr_list:REG_EH_REGION (const_int 0 [0x0])
            (nil)))
    (nil))
;; End of basic block 12, registers live:
 7 [sp] 16 [argp] 20 [frame]

(barrier 142 141 143)

;; Start of basic block 13, registers live: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(code_label 143 142 144 13 12 "" [1 uses])

(note 144 143 146 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 146 144 147 13 (set (reg:SI 90 [ l ])
        (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                (const_int -16 [0xfffffff0])) [0 l+0 S4 A32])) 34 {*movsi_1} (nil)
    (nil))

(insn 147 146 148 13 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 90 [ l ])) 34 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 90 [ l ])
        (nil)))

(call_insn 148 147 149 13 (call (mem:QI (symbol_ref:SI ("lua_close") [flags 0x41] <function_decl 0xb7218a80 lua_close>) [0 S1 A8])
        (const_int 4 [0x4])) 387 {*call_0} (nil)
    (expr_list:REG_EH_REGION (const_int 3 [0x3])
        (nil))
    (nil))
;; End of basic block 13, registers live:
 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; Start of basic block 14, registers live: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
(note 149 148 150 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 150 149 151 14 (parallel [
            (set (reg/f:SI 91)
                (plus:SI (reg/f:SI 20 frame)
                    (const_int -24 [0xffffffe8])))
            (clobber (reg:CC 17 flags))
        ]) 148 {*addsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))

(insn 151 150 152 14 (set (mem/i:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 91)) 34 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 91)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
                (const_int -24 [0xffffffe8]))
            (nil))))

(call_insn 152 151 154 14 (call (mem:QI (symbol_ref:SI ("_ZNSsD1Ev") [flags 0x41] <function_decl 0xb71d1080 __comp_dtor >) [0 S1 A8])
        (const_int 4 [0x4])) 387 {*call_0} (nil)
    (nil)
    (nil))

(insn 154 152 155 14 (set (reg:SI 62 [ D.16760 ])
        (const_int 0 [0x0])) 34 {*movsi_1} (nil)
    (nil))

(insn 155 154 156 14 (set (reg:SI 71 [ <result> ])
        (reg:SI 62 [ D.16760 ])) 34 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 62 [ D.16760 ])
        (nil)))

(jump_insn 156 155 157 14 (set (pc)
        (label_ref 172)) 382 {jump} (nil)
    (nil))
;; End of basic block 14, registers live:
 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71

(barrier 157 156 192)

;; Start of basic block 15, registers live: 0 [ax] 7 [sp] 16 [argp] 20 [frame]
(code_label/s 192 157 195 15 15 "" [1 uses])

(note 195 192 193 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 193 195 158 15 (set (reg:SI 87 [ save_eptr.46 ])
        (reg:SI 0 ax)) 34 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))

(note/s 158 193 161 15 "" NOTE_INSN_DELETED_LABEL 13)

(insn 161 158 163 15 (set (reg:SI 59 [ save_eptr.48 ])
        (reg:SI 87 [ save_eptr.46 ])) 34 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 87 [ save_eptr.46 ])
        (nil)))

(insn 163 161 164 15 (parallel [
            (set (reg/f:SI 93)
                (plus:SI (reg/f:SI 20 frame)
                    (const_int -24 [0xffffffe8])))
            (clobber (reg:CC 17 flags))
        ]) 148 {*addsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))

(insn 164 163 165 15 (set (mem/i:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 93)) 34 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/f:SI 93)
        (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
                (const_int -24 [0xffffffe8]))
            (nil))))

(call_insn 165 164 166 15 (call (mem:QI (symbol_ref:SI ("_ZNSsD1Ev") [flags 0x41] <function_decl 0xb71d1080 __comp_dtor >) [0 S1 A8])
        (const_int 4 [0x4])) 387 {*call_0} (nil)
    (expr_list:REG_EH_REGION (const_int 4 [0x4])
        (nil))
    (nil))

(insn 166 165 186 15 (set (reg:SI 87 [ save_eptr.46 ])
        (reg:SI 59 [ save_eptr.48 ])) 34 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 59 [ save_eptr.48 ])
        (nil)))

(insn 186 166 187 15 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 87 [ save_eptr.46 ])) 34 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 87 [ save_eptr.46 ])
        (nil)))

(call_insn 187 186 169 15 (call (mem:QI (symbol_ref:SI ("_Unwind_Resume") [flags 0x41]) [0 S1 A8])
        (const_int 16 [0x10])) 387 {*call_0} (nil)
    (expr_list:REG_NORETURN (const_int 0 [0x0])
        (nil))
    (nil))
;; End of basic block 15, registers live:
 7 [sp] 16 [argp] 20 [frame]

(barrier 169 187 170)

(note 170 169 172 NOTE_INSN_FUNCTION_END)

;; Start of basic block 16, registers live: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 71
(code_label 172 170 184 16 3 "" [1 uses])

(note 184 172 173 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 173 184 179 16 (set (reg/i:SI 0 ax [ <result> ])
        (reg:SI 71 [ <result> ])) 34 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 71 [ <result> ])
        (nil)))

(insn 179 173 0 16 (use (reg/i:SI 0 ax [ <result> ])) -1 (nil)
    (nil))
;; End of basic block 16, registers live:
 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

